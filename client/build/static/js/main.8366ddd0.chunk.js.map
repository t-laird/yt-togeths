{"version":3,"sources":["Components/Room.js","Components/Home.js","App.js","registerServiceWorker.js","index.js"],"names":["Room","props","qRoomId","Object","assign","match","params","qVideoUrl","queryString","parse","location","search","console","debug","state","formValue","roomId","uuid","videoUrl","socket","io","on","onPlay","onPause","userName","onJoin","onLeave","handleChange","bind","handleSubmit","join","leave","play","pause","value","target","this","setState","rawUrl","window","loadVideoByUrl","emit","log","playVideo","pauseVideo","className","type","onChange","placeholder","onClick","id","Component","Home","App","component","path","withRouter","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","router","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8366ddd0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nclass Room extends Component {\n\n  constructor(props) {\n    super(props);\n\n    var qRoomId = Object.assign({}, props.match.params);\n    var qVideoUrl = Object.assign({}, queryString.parse(props.location.search))\n    console.debug(qRoomId);\n    console.debug(qVideoUrl);\n\n    this.state = {\n      formValue: '',\n      roomId: qRoomId.uuid,\n      videoUrl: qVideoUrl.videoUrl\n    };\n\n    this.socket = io('http://localhost:5000');\n\n    this.socket.on('play', roomId => this.onPlay(roomId));\n    this.socket.on('pause', roomId => this.onPause(roomId));\n    this.socket.on('join', userName => this.onJoin(userName));\n    this.socket.on('leave', userName => this.onLeave(userName));\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.join = this.join.bind(this);\n    this.leave = this.leave.bind(this);\n    this.play = this.play.bind(this);\n    this.pause = this.pause.bind(this);\n\n    this.debug = this.debug.bind(this);\n    this.join();\n  \n  }\n\n  handleChange({ target: { value } }) {\n    this.setState({ formValue: value });\n  }\n\n  // changing video here as a POC for changing video player state\n  // later we will change the video upon receipt of a socket event\n  handleSubmit() {\n    const rawUrl = this.state.videoUrl;\n    window.loadVideoByUrl(rawUrl, 1);\n  }\n\n  join() {\n    this.socket.emit('join', this.state.roomId);\n  }\n\n  onJoin(userName) {\n    console.log(`${userName} has joined the room`);\n  }\n\n  leave() {\n    this.socket.emit('leave', this.state.roomId);\n  }\n\n  onLeave(userName) {\n    console.log(`${userName} has left the room`);\n  }\n\n  play() {\n    this.socket.emit('play', this.state.roomId);\n  }\n\n  onPlay(roomId) {\n    console.debug(\"play the video\", roomId);\n    window.playVideo();\n  }\n\n  pause() {\n    this.socket.emit('pause', this.state.roomId);\n  }\n\n  onPause(roomId) {\n    console.debug(\"pause the video\", roomId);\n    window.pauseVideo();\n  }\n\n  debug() {\n    this.socket.emit('debug', this.state.roomId);\n  }\n\n  render() {\n    return (\n      <div className=\"room\">\n        <div className=\"form\">\n          <h3>Change video:</h3>\n          <input type=\"text\" value={this.state.videoUrl} onChange={this.handleChange} placeholder=\"enter youtube URL\" />\n          <button onClick={this.handleSubmit}>Submit</button>\n        </div>\n        <div className=\"controls\">\n          <button onClick={this.play}>play</button>\n          <button onClick={this.pause}>pause</button>\n          <button onClick={this.debug}>debug</button>\n        </div>\n        <div id=\"yt-embedded-player\">\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Room;","\nimport React, {Component} from 'react';\n\nclass Home extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            formValue: ''\n        };\n    \n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange({target: {value}}) {\n    this.setState({formValue: value});\n  }\n\n    render() {\n        return (\n            <div className=\"home\">\n                <div className=\"form\">\n                    <input type=\"text\" value={this.state.formValue} onChange={this.handleChange} placeholder=\"enter youtube URL\" />\n                    <button onClick={this.handleSubmit}>Submit</button>\n                </div>\n                <div className=\"yt-embedded-player\">\n                    home\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component} from 'react';\nimport { Switch, Route } from 'react-router';\nimport { withRouter } from 'react-router';\nimport './App.scss';\nimport Room from './Components/Room';\nimport Home from './Components/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route component={Room} path=\"/watch/:uuid\"></Route>\n          <Route component={Home} path=\"/\"></Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst router = \n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n\nReactDOM.render(router, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}